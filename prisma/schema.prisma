datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tag {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  deckTags DeckTags[]
  cardTags CardTags[]
}

model DeckTags {
  id     Int   @id @default(autoincrement())
  deck   Deck? @relation(fields: [deckId], references: [id], onDelete: Cascade)
  tag    Tag?  @relation(fields: [tagId], references: [id])
  deckId Int?
  tagId  Int?
}

model CardTags {
  id     Int   @id @default(autoincrement())
  card   Card? @relation(fields: [cardId], references: [id], onDelete: Cascade)
  tag    Tag?  @relation(fields: [tagId], references: [id])
  cardId Int?
  tagId  Int?
}

enum CardType {
  Normal
  Reverse
}

model Card {
  id         Int             @id @default(autoincrement())
  deckId     Int
  deck       Deck            @relation(fields: [deckId], references: [id], onDelete: Cascade)
  obverse    String
  reverse    String
  note       String?
  type       CardType        @default(Normal)
  tags       CardTags[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  memoParams CardMemoParams?
}

model CardMemoParams {
  cardId      Int      @unique
  card        Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  repetitions Int
  easiness    Float
  interval    Int
  dueDate     DateTime @default(now())
}

model Deck {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  isFavorite    Boolean        @default(false)
  cards         Card[]
  studySessions StudySession[]
  tags          DeckTags[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([userId, name])
}

model StudySession {
  id             Int      @id @default(autoincrement())
  deckId         Int
  deck           Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  studyTime      Int
  avgTimePerCard Float
  avgRate        Float
  studiedCards   Int
  positiveCards  Int
  negativeCards  Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum UserRole {
  User
  Admin
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(User)
  decks     Deck[]
  profile   Profile?
  config    Config?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName String?
  lastName  String?
  bio       String?
  website   String?
  avatar    Avatar?
  updatedAt DateTime @updatedAt
}

model Config {
  id                     Int      @id @default(autoincrement())
  userId                 Int      @unique
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  darkTheme              Boolean  @default(false)
  advancedRatingControls Boolean  @default(false)
  updatedAt              DateTime @updatedAt
}

model Avatar {
  id        Int      @id @default(autoincrement())
  profileId Int      @unique
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  source    String?
  updatedAt DateTime @updatedAt
}
